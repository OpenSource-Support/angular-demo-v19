name: Test & Coverage Badge

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Debug LCOV file (if present)
        run: |
          if [ -f coverage/lcov.info ]; then
            echo "First 40 lines of lcov.info:";
            head -n 40 coverage/lcov.info;
            echo "File size:"; wc -c coverage/lcov.info;
            echo "Show first non-empty character codes:";
            awk 'NF { for (i=1;i<=length($0)&&i<=5;i++){printf "%s ",substr($0,i,1)}; print ""; exit }' coverage/lcov.info;
          else
            echo "coverage/lcov.info missing"; ls -R . | head -n 100;
          fi
      - name: Generate coverage summary & badge
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/lcov.info
          badge: true
          format: 'markdown'
          output: 'both'
      - name: Fallback summary (json-summary)
        if: failure()
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            echo "Using json-summary fallback";
            LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json);
            FUNCTIONS=$(jq '.total.functions.pct' coverage/coverage-summary.json);
            BRANCHES=$(jq '.total.branches.pct' coverage/coverage-summary.json);
            STATEMENTS=$(jq '.total.statements.pct' coverage/coverage-summary.json);
            echo "# Code Coverage Summary (Fallback)" > code-coverage-results.md
            echo "Lines: ${LINES}%" >> code-coverage-results.md
            echo "Statements: ${STATEMENTS}%" >> code-coverage-results.md
            echo "Functions: ${FUNCTIONS}%" >> code-coverage-results.md
            echo "Branches: ${BRANCHES}%" >> code-coverage-results.md
            node -e "const fs=require('fs');const pct=parseFloat('${LINES}');function c(p){return p>=90?'brightgreen':p>=80?'green':p>=70?'yellow':p>=60?'orange':'red'};fs.writeFileSync('code-coverage-badge.svg', '<svg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'110\\' height=\\'20\\'><rect rx=\\'3\\' width=\\'110\\' height=\\'20\\' fill=\\'#555\\'/><rect rx=\\'3\\' x=\\'62\\' width=\\'48\\' height=\\'20\\' fill=\\'#'+c(pct)+'\\'/><g fill=\\'#fff\\' text-anchor=\\'middle\\' font-family=\\'Verdana\\' font-size=\\'11\\'><text x=\\'31\\' y=\\'14\\'>coverage</text><text x=\\'85\\' y=\\'14\\'>'+pct+'%</text></g></svg>');" || true
          else
            echo "json-summary fallback not available"; exit 1;
          fi

      - name: Update README with coverage
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Updating README with coverage results"
          SUMMARY_FILE=code-coverage-results.md
          BADGE_SVG=code-coverage-badge.svg

          if [ ! -f "$SUMMARY_FILE" ]; then echo "Summary file missing"; exit 1; fi
          if [ ! -f "$BADGE_SVG" ]; then echo "Badge file missing"; exit 1; fi

          # Strip the top heading from summary (first line) for cleaner embed
          tail -n +2 "$SUMMARY_FILE" > coverage-body.md

          # Replace block between markers
          awk '1' README.md > README.tmp
          awk 'BEGIN{p=1} /<!-- COVERAGE-START -->/{print;print "![Coverage](code-coverage-badge.svg)";print "";system("cat coverage-body.md");p=0} /<!-- COVERAGE-END -->/{p=1} p' README.tmp > README.md

          rm README.tmp coverage-body.md || true

          git config user.name "github-actions"
            git config user.email "actions@users.noreply.github.com"
            git add README.md code-coverage-badge.svg code-coverage-results.md || true
            git commit -m "chore: update coverage badge" || echo "No changes to commit"
            git push || true

      - name: Add PR comment with coverage
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage/lcov.info
            code-coverage-results.md
            code-coverage-badge.svg
